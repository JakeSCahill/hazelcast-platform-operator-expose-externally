name: Test on GKE
on:
  push:
    paths-ignore:
      - 'doc/**'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-west1-b
  HAZELCAST_VERSION: 4.2

jobs:
  run-tests:
    name: Run Intergrational tests on GKE
    runs-on: ubuntu-latest
    continue-on-error: true

    outputs:
      master_ip: ${{ steps.master-ip.outputs.ip }}
      api_token: ${{ steps.secrets.outputs.apiToken }}
      ca_certificate: ${{ steps.secrets.outputs.caCertificate }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: 'adopt'
        cache: 'maven'
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Set up Golang
      uses: actions/setup-go@v2
      with:
        go-version: '^1.17.2'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@v0.2.1
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true 

    - name: Install Kubectl
      run: |-
        gcloud components install kubectl

    - name: Create GKE cluster
      run: |-
        repoName=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $NF}')
        clusterName="$repoName-$GITHUB_RUN_NUMBER"
        echo "clusterName=$clusterName" >> $GITHUB_ENV
        gcloud container clusters create "$clusterName" --zone="$GKE_ZONE" --project="$PROJECT_ID" --machine-type=n1-standard-2 --num-nodes=2
        sleep 30

    - name: Deploy operator
      run: |-
        kubectl apply -f https://repository.hazelcast.com/operator/bundle.yaml
          kubectl wait --for=condition=available --timeout=600s deployment/hazelcast-platform-controller-manager

    - name: Deploy Hazelcast cluster
      run: |-
        kubectl create secret generic hazelcast-license-key --from-literal license-key=${{ secrets.LICENSE }}
        cat <<EOF | kubectl apply -f -
        apiVersion: hazelcast.com/v1alpha1
        kind: Hazelcast
        metadata:
          name: my-hazelcast
        spec:
          clusterSize: 3
          repository: 'docker.io/hazelcast/hazelcast-enterprise'
          version: '5.0-slim'
          licenseKeySecret: hazelcast-license-key
        EOF
        sleep 30
        kubectl wait --for=condition=ready pod/my-hazelcast-0 --timeout=5m
        kubectl wait --for=condition=ready pod/my-hazelcast-1 --timeout=150s
        kubectl wait --for=condition=ready pod/my-hazelcast-2 --timeout=150s
        sleep 5
        
    - name: Wait for deployment to finish
      run: |-
        kubectl wait --for=condition=ready pod/hz-hazelcast-0 --timeout=120s
        kubectl wait --for=condition=ready pod/hz-hazelcast-1 --timeout=120s
        kubectl wait --for=condition=ready pod/hz-hazelcast-2 --timeout=120s

    - name: Wait for external IP to get assigned
      run: |-
        EXTERNAL_IP=$(kubectl get svc hz-hazelcast --output="jsonpath={.status.loadBalancer.ingress[0].ip}")
        while [ "$EXTERNAL_IP" == "" ]; do
          sleep 10
          EXTERNAL_IP=$(kubectl get svc hz-hazelcast --output="jsonpath={.status.loadBalancer.ingress[0].ip}")
        done

        echo "EXTERNAL_IP=${EXTERNAL_IP}" >> $GITHUB_ENV

    - name: Test Java Client
      run: |-
        EXTERNAL_IP="${{ env.EXTERNAL_IP }}"
        cd java
        sed -i "s/<EXTERNAL-IP>/$EXTERNAL_IP/g" src/main/java/com/hazelcast/Main.java
        mvn package
        java -jar target/*jar-with-dependencies*.jar >> output-java.txt &
        PID=$!
        sleep 30
        kill $PID

        cat output-java.txt | grep 'Successful connection!' -q

    - name: Test Node.js Client
      run: |-
        EXTERNAL_IP="${{ env.EXTERNAL_IP }}"
        cd nodejs
        sed -i "s/<EXTERNAL-IP>/$EXTERNAL_IP/g" client.js
        npm install
        npm start >> output-nodejs.txt &
        PID=$!
        sleep 30
        kill $PID

        cat output-nodejs.txt | grep 'Successful connection!' -q

    - name: Test Go Client
      run: |-
        EXTERNAL_IP="${{ env.EXTERNAL_IP }}"
        cd go
        sed -i "s/<EXTERNAL-IP>/$EXTERNAL_IP/g" main.go
        go run main.go >> output-go.txt &
        PID=$!
        sleep 30
        kill $PID

        cat output-go.txt | grep 'Successful connection!' -q

    - name: Test Python Client
      run: |-
        EXTERNAL_IP="${{ env.EXTERNAL_IP }}"
        cd python
        sed -i "s/<EXTERNAL-IP>/$EXTERNAL_IP/g" main.py
        pip install -r requirements.txt
        python main.py >> output-python.txt &
        PID=$!
        sleep 30
        kill $PID

        cat output-python.txt | grep 'Successful connection!' -q

    # Clean up
    - name: Delete cluster
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet

    - name: Clean up of failure
      if: ${{ failure() }}
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet
        exit 1
